<?php

namespace Source\Model;

use Source\Core\Migration;
use Source\Core\Model;

class User extends Model
{
    public function __construct()
    {
        parent::__construct(
            'users',
            [
                'name',
                'email',
                'password',
                'level'
            ]
        );
        $this->migration();

    }

    public function migration(): void
    {
        $tableExists = $this->conn->query("SHOW TABLES LIKE '$this->table'")->rowCount() > 0;
        if (!$tableExists) {
            $migration = new Migration();
            $migration->table($this->table);
            $migration->column("id")->type("int(11)")->default();
            $migration->column("name")->type("varchar(255)")->default();
            $migration->column("email")->type("varchar(255)")->default();
            $migration->column("password")->type("varchar(255)")->default();
            $migration->column("level")->type("int(11)")->default();
            $migration->column("cover")->type("varchar(255)")->default()->null();
            $migration->column('created_at')->type('timestamp')->default("current_timestamp()");
            $migration->column('updated_at')->type('timestamp')->default("current_timestamp() ON UPDATE current_timestamp()");
            $migration->save();
            $migration->primary('id');
            $migration->autoIncrement('id');
        }

    }

    public function emailFilter(): bool
    {
        if (isset($this->email)) {
            if (!filter_var($this->email, FILTER_VALIDATE_EMAIL)) {
                $dynamic = $this->email;
                $this->setResponse(
                    400,
                    "error",
                    "the email format $dynamic is invalid",
                    dynamic: $dynamic
                );
                return false;
            }
            return true;
        }
        return true;
    }

    public function emailIsset(): bool
    {
        if (isset($this->email)) {
            $users = new User();
            $user = $users->find('id', 'email=:email', ['email' => $this->email])->fetch();
            if ($user) {
                if (!isset($this->id)) {
                    $dynamic = $this->email;
                    $this->setResponse(
                        400,
                        "error",
                        "the email $dynamic already exists",
                        dynamic: $dynamic
                    );
                    return false;
                }
                if ($this->id !== $user->id) {
                    $dynamic = $this->email;
                    $this->setResponse(
                        400,
                        "error",
                        "the email $dynamic already exists in another account",
                        dynamic: $dynamic
                    );

                    return false;
                }
                return true;
            }
            return true;
        }
        return true;
    }

    private function password(): bool
    {

        if (!empty($this->password)) {
            $this->password = password_hash($this->password, PASSWORD_BCRYPT, ['cost' => 12]);
            return true;
        }
        return true;
    }

    public function save(): bool
    {
        if ($this->emailFilter() && $this->emailIsset() && $this->password()) {
            return parent::save(); // TODO: Change the autogenerated stub
        }
        return false;
    }
}